@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">

    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-6 text-center">
                <div class="card shadow-lg p-4">
                    <h1 class="display-5 mb-3 text-primary">Welcome</h1>
                    <p class="text-muted">
                        Learn about <a href="https://learn.microsoft.com/aspnet/core" class="text-decoration-none">building Web apps with ASP.NET Core</a>.
                    </p>

                    <hr class="my-4">

                    <h1 class="h3 text-dark mb-4">Number to Words Converter</h1>

                    <!-- Form for Local Conversion -->
                    <form method="post" asp-page-handler="ConvertNumberLocal">
                        <div class="input-group mb-3">
                            <input type="text"
                                   asp-for="Number"
                                   class="form-control"
                                   placeholder="Enter a number"
                                   oninput="validateCurrencyInput(event)"
                                   aria-label="Number Input" />
                            <button type="submit"
                                    id="btnSubmitCNL"
                                    onclick="btnSubmitCNL(event)"
                                    class="btn btn-primary w-25">
                                Convert Local
                            </button>
                        </div>
                    </form>


                    <!-- Form for Database Conversion -->
                    <form method="post" asp-page-handler="ConvertNumberDB">
                        <div class="input-group mb-3">
                            <input type="text"
                                   asp-for="NumberDB"
                                   class="form-control"
                                   placeholder="Enter a number"
                                   oninput="validateCurrencyInput(event)"
                                   aria-label="Number Input" />
                            <button type="submit"
                                    id="btnSubmitCNDB"
                                    onclick="btnSubmitCNDB(event)"
                                    class="btn btn-primary w-25">
                                Convert DB
                            </button>
                        </div>
                    </form>

                    <div id="ValidationMessageForNumber" class="text-danger">
                        @Html.ValidationMessageFor(m => m.Number)
                    </div>

                    <div id="ValidationMessageForNumberDB" class="text-danger">
                        @Html.ValidationMessageFor(s => s.NumberDB)
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Result))
                    {
                        <div class="alert alert-info mt-4" id="result">
                            <h4>Result:</h4>
                            <p>@Model.Result</p>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</body>
</html>



<script>
    function validateCurrencyInput(event) {
        const input = event.target;
        const value = input.value;

        // Allow only numeric values and up to 2 decimal places
        const validNumber = value
            .replace(/[^0-9.]/g, '')            // Allow only numbers and decimal point
            .replace(/(\..*?)\..*/g, '$1')     // Allow only one decimal point
            .replace(/^0+(?!\.|$)/, '0')       // Prevent leading zeros unless it's a decimal (e.g., "0.25")
            .replace(/(\.\d{2})\d+/, '$1');    // Limit to 2 decimal places

        input.value = validNumber;
        console.log("value : ", validNumber);
    }

    function btnSubmitCNL(event) {
        const validationMessageLocal = document.getElementById("ValidationMessageForNumber");
        const validationMessageDB = document.getElementById("ValidationMessageForNumberDB");

        validationMessageLocal.hidden = false;
        validationMessageDB.hidden = true;
    }

    function btnSubmitCNDB(event) {
        const validationMessageLocal = document.getElementById("ValidationMessageForNumber");
        const validationMessageDB = document.getElementById("ValidationMessageForNumberDB");

        validationMessageLocal.hidden = true;
        validationMessageDB.hidden = false;
    }

    // function convertToWords() {
    //     const number = document.getElementById("number").value;

    //     if (!number.trim()) {
    //         const resultElement = document.getElementById("result");
    //         resultElement.style.display = "block";
    //         resultElement.textContent = "Please enter a value.";
    //         resultElement.classList.remove("alert-info");
    //         resultElement.classList.add("alert-danger");
    //         return;
    //     }

    //     const formData = new FormData();
    //     formData.append("number", number);

    //     fetch("https://localhost:44395/api/v1/apihandler/ConvertNumberToWords", {
    //         method: "POST",
    //         body: formData
    //     })
    //         .then(response => response.json())
    //         .then(data => {
    //             console.log("result", data.words);
    //             const resultElement = document.getElementById("result");
    //             resultElement.style.display = "block";
    //             if (data.words) {
    //                 resultElement.textContent = `Converted: ${data.words}`;
    //                 resultElement.classList.remove("alert-danger");
    //                 resultElement.classList.add("alert-info");
    //             } else {
    //                 resultElement.textContent = `Error: ${data.message}`;
    //                 resultElement.classList.remove("alert-info");
    //                 resultElement.classList.add("alert-danger");
    //             }
    //         })
    //         .catch(error => {
    //             const resultElement = document.getElementById("result");
    //             resultElement.style.display = "block";
    //             resultElement.textContent = "An error occurred. Please try again.";
    //             resultElement.classList.remove("alert-info");
    //             resultElement.classList.add("alert-danger");
    //         });

    // }

</script>


